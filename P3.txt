//3
#include <GL/glut.h>
#include <GL/glu.h>
#include <GL/gl.h>

void myInit() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, 1.0, 1.0, 10.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(3, 3, 3, 0, 0, 0, 0, 1, 0);
}

void drawTetra() {
    glBegin(GL_TRIANGLES);
    
    // Front face
    glColor3f(1.0, 0.0, 0.0); // Red
    glVertex3f(1.0, 1.0, 1.0); // Top
    glVertex3f(-1.0, -1.0, 1.0); // Bottom left
    glVertex3f(-1.0, 1.0, -1.0); // Bottom right
    
    // Left face
    glColor3f(0.0, 1.0, 0.0); // Green
    glVertex3f(1.0, 1.0, 1.0); // Top
    glVertex3f(-1.0, 1.0, -1.0); // Bottom right
    glVertex3f(1.0, -1.0, -1.0); // Left
    
    // Right face
    glColor3f(0.0, 0.0, 1.0); // Blue
    glVertex3f(1.0, 1.0, 1.0); // Top
    glVertex3f(-1.0, -1.0, 1.0); // Left
    glVertex3f(1.0, -1.0, -1.0); // Bottom left
    
    // Bottom face
    glColor3f(1.0, 1.0, 0.0); // Yellow
    glVertex3f(-1.0, -1.0, 1.0); // Bottom left
    glVertex3f(-1.0, 1.0, -1.0); // Bottom right
    glVertex3f(1.0, -1.0, -1.0); // Left
    
    glEnd();
}


void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // Clearing buffers before rendering
    drawTetra();
    glTranslatef(4.0, 6.0, 6.0);
    glRotatef(180.0, 0.0, 0.0, 1.0);
    glScalef(0.3, 0.3, 0.3);
    drawTetra();
    glFlush();
    glutSwapBuffers();
}

void myReshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (w <= h) {
        glOrtho(-2, 2, -2 * (GLfloat)h / (GLfloat)w, 2 * (GLfloat)h / (GLfloat)w, -10, 10);
    } else {
        glOrtho(-2 * (GLfloat)w / (GLfloat)h, 2 * (GLfloat)w / (GLfloat)h, -2, 2, -10, 10);
    }
    glMatrixMode(GL_MODELVIEW);
    glutPostRedisplay();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(10, 10);
    glutCreateWindow("Anirudh : 3D Transformation");
    myInit();
    glutReshapeFunc(myReshape);
    glutDisplayFunc(display);
    glEnable(GL_DEPTH_TEST);
    glutMainLoop();
    return 0;
}